{
  "version": 3,
  "sources": ["../../.pnpm/react-wrap-balancer@0.5.0_react@18.2.0/node_modules/react-wrap-balancer/src/index.tsx", "../../.pnpm/react-wrap-balancer@0.5.0_react@18.2.0/node_modules/react-wrap-balancer/src/utils.tsx"],
  "sourcesContent": ["'use client'\n\nimport React from 'react'\nimport { useId, IS_SERVER, useIsomorphicLayoutEffect } from './utils'\n\nconst SYMBOL_KEY = '__wrap_b'\nconst SYMBOL_OBSERVER_KEY = '__wrap_o'\n\ninterface WrapperElement extends HTMLElement {\n  [SYMBOL_OBSERVER_KEY]?: ResizeObserver | undefined\n}\n\ntype RelayoutFn = (\n  id: string | number,\n  ratio: number,\n  wrapper?: WrapperElement\n) => void\n\ndeclare global {\n  interface Window {\n    [SYMBOL_KEY]: RelayoutFn\n  }\n}\n\nconst relayout: RelayoutFn = (id, ratio, wrapper) => {\n  wrapper =\n    wrapper || document.querySelector<WrapperElement>(`[data-br=\"${id}\"]`)\n  const container = wrapper.parentElement\n\n  const update = (width: number) => (wrapper.style.maxWidth = width + 'px')\n\n  // Reset wrapper width\n  wrapper.style.maxWidth = ''\n\n  // Get the initial container size\n  const width = container.clientWidth\n  const height = container.clientHeight\n\n  // Synchronously do binary search and calculate the layout\n  let lower: number = width / 2 - 0.25\n  let upper: number = width + 0.5\n  let middle: number\n\n  if (width) {\n    // Ensure we don't search widths lower than when the text overflows\n    update(lower)\n    lower = Math.max(wrapper.scrollWidth, lower)\n\n    while (lower + 1 < upper) {\n      middle = Math.round((lower + upper) / 2)\n      update(middle)\n      if (container.clientHeight === height) {\n        upper = middle\n      } else {\n        lower = middle\n      }\n    }\n\n    // Update the wrapper width\n    update(upper * ratio + width * (1 - ratio))\n  }\n\n  // Create a new observer if we don't have one.\n  // Note that we must inline the key here as we use `toString()` to serialize\n  // the function.\n  if (!wrapper['__wrap_o']) {\n    if (typeof ResizeObserver !== 'undefined') {\n      ;(wrapper['__wrap_o'] = new ResizeObserver(() => {\n        self.__wrap_b(0, +wrapper.dataset.brr, wrapper)\n      })).observe(container)\n    } else {\n      // Silently ignore ResizeObserver for production builds\n      if (process.env.NODE_ENV === 'development') {\n        console.warn(\n          'The browser you are using does not support the ResizeObserver API. ' +\n            'Please consider add polyfill for this API to avoid potential layout shifts or upgrade your browser. ' +\n            'Read more: https://github.com/shuding/react-wrap-balancer#browser-support-information'\n        )\n      }\n    }\n  }\n}\n\nconst RELAYOUT_STR = relayout.toString()\n\nconst createScriptElement = (\n  injected: boolean,\n  nonce?: string,\n  suffix: string = ''\n) => (\n  <script\n    suppressHydrationWarning\n    dangerouslySetInnerHTML={{\n      // Calculate the balance initially for SSR\n      __html: (injected ? '' : `self.${SYMBOL_KEY}=${RELAYOUT_STR};`) + suffix,\n    }}\n    nonce={nonce}\n  />\n)\n\ninterface BalancerOwnProps<\n  ElementType extends React.ElementType = React.ElementType\n> extends React.HTMLAttributes<HTMLElement> {\n  /**\n   * The HTML tag to use for the wrapper element.\n   * @default 'span'\n   */\n  as?: ElementType\n  /**\n   * The balance ratio of the wrapper width (0 <= ratio <= 1).\n   * 0 means the wrapper width is the same as the container width (no balance, browser default).\n   * 1 means the wrapper width is the minimum (full balance, most compact).\n   * @default 1\n   */\n  ratio?: number\n  /**\n   * The nonce attribute to allowlist inline script injection by the component.\n   */\n  nonce?: string\n  children?: React.ReactNode\n}\n\ntype BalancerProps<ElementType extends React.ElementType> =\n  BalancerOwnProps<ElementType> &\n    Omit<React.ComponentPropsWithoutRef<ElementType>, keyof BalancerOwnProps>\n\n/**\n * An optional provider to inject the global relayout function, so all children\n * Balancer components can share it.\n */\nconst BalancerContext = React.createContext<boolean>(false)\nconst Provider: React.FC<{\n  /**\n   * The nonce attribute to allowlist inline script injection by the component\n   */\n  nonce?: string\n  children?: React.ReactNode\n}> = ({ nonce, children }) => {\n  return (\n    <BalancerContext.Provider value={true}>\n      {createScriptElement(false, nonce)}\n      {children}\n    </BalancerContext.Provider>\n  )\n}\n\nconst Balancer = <ElementType extends React.ElementType = React.ElementType>({\n  ratio = 1,\n  nonce,\n  children,\n  ...props\n}: BalancerProps<ElementType>) => {\n  const id = useId()\n  const wrapperRef = React.useRef<WrapperElement>()\n  const hasProvider = React.useContext(BalancerContext)\n  const Wrapper: React.ElementType = props.as || 'span'\n\n  // Re-balance on content change and on mount/hydration.\n  useIsomorphicLayoutEffect(() => {\n    if (wrapperRef.current) {\n      // Re-assign the function here as the component can be dynamically rendered, and script tag won't work in that case.\n      ;(self[SYMBOL_KEY] = relayout)(0, ratio, wrapperRef.current)\n    }\n  }, [children, ratio])\n\n  // Remove the observer when unmounting.\n  useIsomorphicLayoutEffect(() => {\n    return () => {\n      if (!wrapperRef.current) return\n\n      const resizeObserver = wrapperRef.current[SYMBOL_OBSERVER_KEY]\n      if (!resizeObserver) return\n\n      resizeObserver.disconnect()\n      delete wrapperRef.current[SYMBOL_OBSERVER_KEY]\n    }\n  }, [])\n\n  if (process.env.NODE_ENV === 'development') {\n    // In development, we check `children`'s type to ensure we are not wrapping\n    // elements like <p> or <h1> inside. Instead <Balancer> should directly\n    // wrap text nodes.\n    if (children && !Array.isArray(children) && typeof children === 'object') {\n      if (\n        'type' in children &&\n        typeof children.type === 'string' &&\n        children.type !== 'span'\n      ) {\n        console.warn(\n          `<Balancer> should not wrap <${children.type}> inside. Instead, it should directly wrap text or inline nodes.\n\nTry changing this:\n  <Balancer><${children.type}>content</${children.type}></Balancer>\nTo:\n  <${children.type}><Balancer>content</Balancer></${children.type}>`\n        )\n      }\n    }\n  }\n\n  return (\n    <>\n      <Wrapper\n        {...props}\n        data-br={id}\n        data-brr={ratio}\n        ref={wrapperRef}\n        style={{\n          display: 'inline-block',\n          verticalAlign: 'top',\n          textDecoration: 'inherit',\n        }}\n        suppressHydrationWarning\n      >\n        {children}\n      </Wrapper>\n      {createScriptElement(\n        hasProvider,\n        nonce,\n        `self.${SYMBOL_KEY}(\"${id}\",${ratio})`\n      )}\n    </>\n  )\n}\n\n// As Next.js adds `display: none` to `body` for development, we need to trigger\n// a re-balance right after the style is removed, synchronously.\nif (!IS_SERVER && process.env.NODE_ENV !== 'production') {\n  const next_dev_style = document.querySelector<HTMLElement>(\n    '[data-next-hide-fouc]'\n  )\n  if (next_dev_style) {\n    const callback: MutationCallback = (mutationList) => {\n      for (const mutation of mutationList) {\n        for (const node of Array.from(mutation.removedNodes)) {\n          if (node !== next_dev_style) continue\n\n          observer.disconnect()\n          const elements =\n            document.querySelectorAll<WrapperElement>('[data-br]')\n\n          for (const element of Array.from(elements)) {\n            self[SYMBOL_KEY](0, +element.dataset.brr, element)\n          }\n        }\n      }\n    }\n    const observer = new MutationObserver(callback)\n    observer.observe(document.head, { childList: true })\n  }\n}\n\nexport default Balancer\nexport { Provider, Balancer }\n", "import React from 'react'\n\nexport const IS_SERVER = typeof window === 'undefined'\nexport const useIsomorphicLayoutEffect = IS_SERVER\n  ? React.useEffect\n  : React.useLayoutEffect\n\nlet ID = 0\nconst genId = () => ++ID\nlet serverHandoffComplete = false\n\nfunction useIdPolyfill() {\n  const [id, setId] = React.useState(serverHandoffComplete ? genId : undefined)\n\n  useIsomorphicLayoutEffect(() => {\n    if (id === undefined) {\n      setId(++ID)\n    }\n\n    serverHandoffComplete = true\n  }, [])\n\n  if (id === undefined) {\n    return id\n  }\n\n  return `rwb-${id.toString(32)}`\n}\n\n/**\n * A hook for generating unique IDs that are stable across the server and client,\n * while avoiding hydration mismatches. Compatible with React 16+ by using\n * [React 18's useId](https://reactjs.org/docs/hooks-reference.html#useid) if\n * it's available, and a polyfill implementation inspired by\n * [@accessible/use-id](https://github.com/accessible-ui/use-id) if it is not.\n *\n * \"rwb-\" is hard-coded as a prefix in the polyfill. When using React 18+,\n * a prefix can be provided with the `identifierPrefix` option in\n * [ReactDOMClient](https://reactjs.org/docs/react-dom-client.html).\n */\nexport function useId() {\n  const implementation = React.useMemo((): (() => string | number) => {\n    if ('useId' in React) return React.useId\n    return useIdPolyfill\n  }, [])\n\n  return implementation()\n}\n"],
  "mappings": "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",
  "names": ["import_react", "IS_SERVER", "useIsomorphicLayoutEffect", "React", "ID", "genId", "serverHandoffComplete", "useIdPolyfill", "id", "setId", "useId", "SYMBOL_KEY", "SYMBOL_OBSERVER_KEY", "relayout", "ratio", "wrapper", "container", "update", "width", "height", "lower", "upper", "middle", "RELAYOUT_STR", "createScriptElement", "injected", "nonce", "suffix", "BalancerContext", "Provider", "children", "Balancer", "props", "wrapperRef", "hasProvider", "Wrapper", "resizeObserver", "next_dev_style", "callback", "mutationList", "mutation", "node", "observer", "elements", "element", "src_default"]
}
