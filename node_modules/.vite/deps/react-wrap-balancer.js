"use client";
import {
  require_react
} from "./chunk-QSTP2CRO.js";
import {
  __toESM
} from "./chunk-TFWDKVI3.js";

// node_modules/.pnpm/react-wrap-balancer@0.5.0_react@18.2.0/node_modules/react-wrap-balancer/dist/index.mjs
var import_react = __toESM(require_react(), 1);
var import_react2 = __toESM(require_react(), 1);
var m = typeof window == "undefined";
var d = m ? import_react2.default.useEffect : import_react2.default.useLayoutEffect;
var E = 0;
var h = () => ++E;
var y = false;
function x() {
  let [t, r] = import_react2.default.useState(y ? h : void 0);
  return d(() => {
    t === void 0 && r(++E), y = true;
  }, []), t === void 0 ? t : `rwb-${t.toString(32)}`;
}
function b() {
  return import_react2.default.useMemo(() => "useId" in import_react2.default ? import_react2.default.useId : x, [])();
}
var f = "__wrap_b";
var R = "__wrap_o";
var _ = (t, r, e) => {
  e = e || document.querySelector(`[data-br="${t}"]`);
  let s = e.parentElement, a = (T) => e.style.maxWidth = T + "px";
  e.style.maxWidth = "";
  let n = s.clientWidth, u = s.clientHeight, o = n / 2 - 0.25, c = n + 0.5, p;
  if (n) {
    for (a(o), o = Math.max(e.scrollWidth, o); o + 1 < c; )
      p = Math.round((o + c) / 2), a(p), s.clientHeight === u ? c = p : o = p;
    a(c * r + n * (1 - r));
  }
  e.__wrap_o || (typeof ResizeObserver != "undefined" ? (e.__wrap_o = new ResizeObserver(() => {
    self.__wrap_b(0, +e.dataset.brr, e);
  })).observe(s) : console.warn("The browser you are using does not support the ResizeObserver API. Please consider add polyfill for this API to avoid potential layout shifts or upgrade your browser. Read more: https://github.com/shuding/react-wrap-balancer#browser-support-information"));
};
var O = _.toString();
var v = (t, r, e = "") => import_react.default.createElement("script", { suppressHydrationWarning: true, dangerouslySetInnerHTML: { __html: (t ? "" : `self.${f}=${O};`) + e }, nonce: r });
var g = import_react.default.createContext(false);
var L = ({ nonce: t, children: r }) => import_react.default.createElement(g.Provider, { value: true }, v(false, t), r);
var B = ({ ratio: t = 1, nonce: r, children: e, ...s }) => {
  let a = b(), n = import_react.default.useRef(), u = import_react.default.useContext(g), o = s.as || "span";
  return d(() => {
    n.current && (self[f] = _)(0, t, n.current);
  }, [e, t]), d(() => () => {
    if (!n.current)
      return;
    let c = n.current[R];
    c && (c.disconnect(), delete n.current[R]);
  }, []), e && !Array.isArray(e) && typeof e == "object" && "type" in e && typeof e.type == "string" && e.type !== "span" && console.warn(`<Balancer> should not wrap <${e.type}> inside. Instead, it should directly wrap text or inline nodes.

Try changing this:
  <Balancer><${e.type}>content</${e.type}></Balancer>
To:
  <${e.type}><Balancer>content</Balancer></${e.type}>`), import_react.default.createElement(import_react.default.Fragment, null, import_react.default.createElement(o, { ...s, "data-br": a, "data-brr": t, ref: n, style: { display: "inline-block", verticalAlign: "top", textDecoration: "inherit" }, suppressHydrationWarning: true }, e), v(u, r, `self.${f}("${a}",${t})`));
};
if (!m && true) {
  let t = document.querySelector("[data-next-hide-fouc]");
  if (t) {
    let r = (s) => {
      for (let a of s)
        for (let n of Array.from(a.removedNodes)) {
          if (n !== t)
            continue;
          e.disconnect();
          let u = document.querySelectorAll("[data-br]");
          for (let o of Array.from(u))
            self[f](0, +o.dataset.brr, o);
        }
    }, e = new MutationObserver(r);
    e.observe(document.head, { childList: true });
  }
}
var M = B;
export {
  B as Balancer,
  L as Provider,
  M as default
};
//# sourceMappingURL=react-wrap-balancer.js.map
